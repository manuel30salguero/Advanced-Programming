Unique Pointer
--------------

Q1. List one or two benefits of using RAII to manage memory instead manually calling `new` and `delete`.
A1. Mainly because resources (i.e. memory, mutexes, or threads) are automatically released when the object that references them goes out of scope. This prevents forgotten delete calls or double free errors. 

Q2. When implementing move semantics for a `unique_ptr`, for example in the move constructor `unique_ptr(unique_ptr&& other)`, it is essential that we set the underlying pointer of the `other` parameter to `nullptr` before exiting the function. Explain in your own words what problem would arise if we did not.
A2. If the other object is not set to nullptr, both the original unique_ptr and the moved-to unique_ptr will still point to the same resource. When the first unique_ptr (the moved-from one) goes out of scope, its destructor will attempt to delete the resource. However, when the second unique_ptr (the moved-to one) is destroyed, it will also attempt to delete the same resource, resulting in a double delete.

Q3. This method of recursive deallocation through RAII works great for small lists, but may pose a problem for longer lists. Why? Hint: what is the limit for how "deep" a recursive function's call stack can grow?
A3. It may pose a problem because the call stack is limited in size. Recursive functions use stack space for each call, and for long lists, the recursion depth may exceed the stack's capacity, leading to a stack overflow.

Q4. What does `std::move` do in this context? Why is it safe to use `std::move` and move semantics here?
A4. std::move casts an object to an r-value reference, enabling move semantics. This allows for the transfer of ownership from one unique_ptr to another, ensuring that only the moved-to unique_ptr owns the resource.